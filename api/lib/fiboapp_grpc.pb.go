// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.2
// source: api/proto/fiboapp.proto

package lib

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FiboAppClient is the client API for FiboApp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FiboAppClient interface {
	GRPCStart(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type fiboAppClient struct {
	cc grpc.ClientConnInterface
}

func NewFiboAppClient(cc grpc.ClientConnInterface) FiboAppClient {
	return &fiboAppClient{cc}
}

func (c *fiboAppClient) GRPCStart(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/api.FiboApp/GRPCStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FiboAppServer is the server API for FiboApp service.
// All implementations must embed UnimplementedFiboAppServer
// for forward compatibility
type FiboAppServer interface {
	GRPCStart(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedFiboAppServer()
}

// UnimplementedFiboAppServer must be embedded to have forward compatible implementations.
type UnimplementedFiboAppServer struct {
}

func (UnimplementedFiboAppServer) GRPCStart(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GRPCStart not implemented")
}
func (UnimplementedFiboAppServer) mustEmbedUnimplementedFiboAppServer() {}

// UnsafeFiboAppServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FiboAppServer will
// result in compilation errors.
type UnsafeFiboAppServer interface {
	mustEmbedUnimplementedFiboAppServer()
}

func RegisterFiboAppServer(s grpc.ServiceRegistrar, srv FiboAppServer) {
	s.RegisterService(&FiboApp_ServiceDesc, srv)
}

func _FiboApp_GRPCStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FiboAppServer).GRPCStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.FiboApp/GRPCStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FiboAppServer).GRPCStart(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// FiboApp_ServiceDesc is the grpc.ServiceDesc for FiboApp service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FiboApp_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.FiboApp",
	HandlerType: (*FiboAppServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GRPCStart",
			Handler:    _FiboApp_GRPCStart_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/fiboapp.proto",
}
